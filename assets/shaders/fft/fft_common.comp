/* Copyright (C) 2015-2018 Hans-Kristian Arntzen <maister@archlinux.us>
 *
 * Permission is hereby granted, free of charge,
 * to any person obtaining a copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

#if defined(FFT_NATIVE_FP16)
    #extension GL_EXT_shader_explicit_arithmetic_types : require
    #extension GL_EXT_shader_16bit_storage : require
#elif defined(FFT_FP16)
    precision mediump float;
#endif

#define BINDING_SSBO_IN 0
#define BINDING_SSBO_OUT 1
#define BINDING_SSBO_AUX 2
#define BINDING_TEXTURE0 3
#define BINDING_TEXTURE1 4
#define BINDING_IMAGE 5

layout(std430, push_constant) uniform UBO
{
    uvec4 p_stride_padding;
    vec4 texture_offset_scale;
} constant_data;
#define uStride constant_data.p_stride_padding.y

// cfloat is the "generic" type used to hold complex data.
// GLFFT supports vec2, vec4 and "vec8" for its complex data
// to be able to work on 1, 2 and 4 complex values in a single vector.
// FFT_VEC2, FFT_VEC4 defines which type we're using.
// The shaders are compiled on-demand.

// FP16 values are packed as 2xfp16 in a uint.
// packHalf2x16 and unpackHalf2x16 are used to bitcast between these formats.

// The complex number format is (real, imag, real, imag, ...) in an interleaved fashion.
// For complex-to-real or real-to-complex transforms, we consider two adjacent real samples to be a complex number as-is.
// Separate "resolve" passes are added to make the transform correct.

#if defined(FFT_FP16) && defined(FFT_NATIVE_FP16)
    #define native_float float16_t
    #define native_vec2 f16vec2
    #define native_vec4 f16vec4
#else
    #define native_float float
    #define native_vec2 vec2
    #define native_vec4 vec4
#endif

#if defined(FFT_VEC2)
    #define cfloat native_vec2
    #if defined(FFT_NATIVE_FP16)
        #define cfloat_buffer_fp16 f16vec2
    #else
        #define cfloat_buffer_fp16 uint
    #endif
#elif defined(FFT_VEC4)
    #define cfloat native_vec4
    #if defined(FFT_NATIVE_FP16)
        #define cfloat_buffer_fp16 f16vec4
    #else
        #define cfloat_buffer_fp16 uvec2
    #endif
#else
    #error FFT_VEC2 or FFT_VEC4 must be defined.
#endif

#ifdef FFT_INPUT_FP16
    #define cfloat_buffer_in cfloat_buffer_fp16
#else
    #define cfloat_buffer_in cfloat
#endif

#ifdef FFT_OUTPUT_FP16
    #define cfloat_buffer_out cfloat_buffer_fp16
#else
    #define cfloat_buffer_out cfloat
#endif

// Normally this would be sqrt(1 / radix), but we'd have to apply normalization
// for every pass instead of just half of them. Also, 1 / 2^n is "lossless" in FP math.
#ifdef FFT_NORMALIZE
    #define FFT_NORM_FACTOR native_float(1.0 / float(FFT_RADIX))
#endif

// FFT_CVECTOR_SIZE defines an interleaving stride for the first pass.
// The first FFT pass with stockham autosort needs to do some shuffling around if we're processing
// more than one complex value per vector.
// This is only needed for horizontal transforms since we vectorize horizontally and different elements
// in the vector are from different transforms when we do vertical transforms.

#if defined(FFT_P1) && ((!defined(FFT_DUAL) && defined(FFT_HORIZ) && defined(FFT_VEC4)))
    #define FFT_CVECTOR_SIZE 2
#else
    #define FFT_CVECTOR_SIZE 1
#endif

// Complex multiply.
native_vec4 cmul(native_vec4 a, native_vec4 b)
{
    native_vec4 r3 = a.yxwz;
    native_vec4 r1 = b.xxzz;
    native_vec4 R0 = a * r1;
    native_vec4 r2 = b.yyww;
    native_vec4 R1 = r2 * r3;
    return R0 + native_vec4(-R1.x, R1.y, -R1.z, R1.w);
}

native_vec2 cmul(native_vec2 a, native_vec2 b)
{
    native_vec2 r3 = a.yx;
    native_vec2 r1 = b.xx;
    native_vec2 R0 = a * r1;
    native_vec2 r2 = b.yy;
    native_vec2 R1 = r2 * r3;
    return R0 + native_vec2(-R1.x, R1.y);
}

#ifdef FFT_INPUT_TEXTURE

#ifndef FFT_P1
    #error Input texture can only be used when P == 1.
#endif

#if defined(FFT_INPUT_FP16) || defined(FFT_FP16)
    precision mediump sampler2D;
#else
    precision highp sampler2D;
#endif

#define uTexelOffset constant_data.texture_offset_scale.xy
#define uTexelScale constant_data.texture_offset_scale.zw

layout(binding = BINDING_TEXTURE0)  sampler2D uTexture;
#ifdef FFT_CONVOLVE
layout(binding = BINDING_TEXTURE1) uniform sampler2D uTexture2;
#endif

cfloat load_texture(sampler2D samp, uvec2 coord)
{
    highp vec2 uv = vec2(coord) * uTexelScale + uTexelOffset;

    // Quite messy, this :)
#if defined(FFT_VEC4)
    #if defined(FFT_INPUT_REAL)
    return cfloat(
        textureLodOffset(samp, uv, 0.0, ivec2(0, 0)).x,
        textureLodOffset(samp, uv, 0.0, ivec2(1, 0)).x,
        textureLodOffset(samp, uv, 0.0, ivec2(2, 0)).x,
        textureLodOffset(samp, uv, 0.0, ivec2(3, 0)).x);
    #elif defined(FFT_DUAL)
    return cfloat(textureLod(samp, uv, 0.0));
    #else
    return cfloat(
        textureLodOffset(samp, uv, 0.0, ivec2(0, 0)).xy,
        textureLodOffset(samp, uv, 0.0, ivec2(1, 0)).xy);
    #endif
#elif defined(FFT_VEC2)
    #if defined(FFT_INPUT_REAL)
    return cfloat(
        textureLodOffset(samp, uv, 0.0, ivec2(0, 0)).x,
        textureLodOffset(samp, uv, 0.0, ivec2(1, 0)).x);
    #else
    return cfloat(textureLod(samp, uv, 0.0).xy);
    #endif
#endif
}

cfloat load_texture(uvec2 coord)
{
#ifdef FFT_CONVOLVE
    // Convolution in frequency domain is multiplication.
    cfloat c0 = load_texture(uTexture, coord);
    cfloat c1 = load_texture(uTexture2, coord);
    return cmul(c0, c1);
#else
    return load_texture(uTexture, coord);
#endif
}

// Implement a dummy load_global, or we have to #ifdef out lots of dead code elsewhere.
cfloat load_global(uint offset)
{
    return cfloat(0.0);
}

#else

layout(std430, binding = BINDING_SSBO_IN) readonly buffer Block
{
    cfloat_buffer_in data[];
} fft_in;

#ifdef FFT_CONVOLVE
layout(std430, binding = BINDING_SSBO_AUX) readonly buffer Block2
{
    cfloat_buffer_in data[];
} fft_in2;

cfloat load_global(uint offset)
{
    // Convolution in frequency domain is multiplication.
#if defined(FFT_INPUT_FP16) && defined(FFT_VEC2) && !defined(FFT_NATIVE_FP16)
    return cmul(unpackHalf2x16(fft_in.data[offset]), unpackHalf2x16(fft_in2.data[offset]));
#elif defined(FFT_INPUT_FP16) && defined(FFT_VEC4) && !defined(FFT_NATIVE_FP16)
    uvec2 data = fft_in.data[offset];
    uvec2 data2 = fft_in2.data[offset];
    return cmul(vec4(unpackHalf2x16(data.x), unpackHalf2x16(data.y)), vec4(unpackHalf2x16(data2.x), unpackHalf2x16(data2.y)));
#else
    return cmul(cfloat(fft_in.data[offset]), cfloat(fft_in2.data[offset]));
#endif
}
#else
cfloat load_global(uint offset)
{
#if defined(FFT_INPUT_FP16) && defined(FFT_VEC2) && !defined(FFT_NATIVE_FP16)
    return unpackHalf2x16(fft_in.data[offset]);
#elif defined(FFT_INPUT_FP16) && defined(FFT_VEC4) && !defined(FFT_NATIVE_FP16)
    uvec2 data = fft_in.data[offset];
    return cfloat(unpackHalf2x16(data.x), unpackHalf2x16(data.y));
#else
    return cfloat(fft_in.data[offset]);
#endif
}
#endif
#endif

#ifndef FFT_OUTPUT_IMAGE
layout(std430, binding = BINDING_SSBO_OUT) writeonly buffer BlockOut
{
    cfloat_buffer_out data[];
} fft_out;

void store_global(uint offset, cfloat v)
{
#ifdef FFT_NORM_FACTOR
    v *= FFT_NORM_FACTOR;
#endif

#if defined(FFT_OUTPUT_FP16) && defined(FFT_VEC2) && !defined(FFT_NATIVE_FP16)
    fft_out.data[offset] = packHalf2x16(v);
#elif defined(FFT_OUTPUT_FP16) && defined(FFT_VEC4) && !defined(FFT_NATIVE_FP16)
    fft_out.data[offset] = uvec2(packHalf2x16(v.xy), packHalf2x16(v.zw));
#else
    fft_out.data[offset] = cfloat_buffer_out(v);
#endif
}
#endif

#ifdef FFT_OUTPUT_IMAGE

precision mediump image2D;

//#ifdef FFT_P1
//#error FFT_OUTPUT_IMAGE is not supported in first pass.
//#endif

// Currently, GLFFT only supports outputing to "fixed" formats like these.
// Should be possible to add options for this to at least choose between FP16/FP32 output,
// and maybe rgba8_unorm for FFT_DUAL case.
#if defined(FFT_DUAL)
layout(rgba16f, binding = BINDING_IMAGE) uniform writeonly image2D uImage;
#elif defined(FFT_OUTPUT_REAL)
layout(r16f, binding = BINDING_IMAGE) uniform writeonly image2D uImage;
#else
layout(rg16f, binding = BINDING_IMAGE) uniform writeonly image2D uImage;
#endif

void store(ivec2 coord, native_vec4 value)
{
#ifdef FFT_NORM_FACTOR
    value *= FFT_NORM_FACTOR;
#endif

#if defined(FFT_DUAL)
    imageStore(uImage, coord, value);
#elif defined(FFT_HORIZ)
#ifdef FFT_OUTPUT_REAL
    imageStore(uImage, coord * ivec2(2, 1) + ivec2(0, 0), value.xxxx);
    imageStore(uImage, coord * ivec2(2, 1) + ivec2(1, 0), value.yyyy);
    imageStore(uImage, coord * ivec2(2, 1) + ivec2(2, 0), value.zzzz);
    imageStore(uImage, coord * ivec2(2, 1) + ivec2(3, 0), value.wwww);
#else
    imageStore(uImage, coord + ivec2(0, 0), value.xyxy);
    imageStore(uImage, coord + ivec2(1, 0), value.zwzw);
#endif
#elif defined(FFT_VERT)
#ifdef FFT_OUTPUT_REAL
    imageStore(uImage, coord * ivec2(4, 1) + ivec2(0, 0), value.xxxx);
    imageStore(uImage, coord * ivec2(4, 1) + ivec2(1, 0), value.yyyy);
    imageStore(uImage, coord * ivec2(4, 1) + ivec2(2, 0), value.zzzz);
    imageStore(uImage, coord * ivec2(4, 1) + ivec2(3, 0), value.wwww);
#else
    imageStore(uImage, coord * ivec2(2, 1) + ivec2(0, 0), value.xyxy);
    imageStore(uImage, coord * ivec2(2, 1) + ivec2(1, 0), value.zwzw);
#endif
#else
#error Inconsistent defines.
#endif
}

#ifndef FFT_DUAL
void store(ivec2 coord, native_vec2 value)
{
#ifdef FFT_NORM_FACTOR
    value *= FFT_NORM_FACTOR;
#endif

#if defined(FFT_HORIZ)
#ifdef FFT_OUTPUT_REAL
    imageStore(uImage, coord * ivec2(2, 1) + ivec2(0, 0), value.xxxx);
    imageStore(uImage, coord * ivec2(2, 1) + ivec2(1, 0), value.yyyy);
#else
    imageStore(uImage, coord, value.xyxy);
#endif
#elif defined(FFT_VERT)
#ifdef FFT_OUTPUT_REAL
    imageStore(uImage, coord * ivec2(2, 1) + ivec2(0, 0), value.xxxx);
    imageStore(uImage, coord * ivec2(2, 1) + ivec2(1, 0), value.yyyy);
#else
    imageStore(uImage, coord, value.xyxy);
#endif
#else
#error Inconsistent defines.
#endif
}
#endif

#endif

#define PI native_float(3.14159265359)
#define SQRT_1_2 native_float(0.70710678118)

#ifdef FFT_INVERSE
#define PI_DIR (+PI)
#else
#define PI_DIR (-PI)
#endif

// Some GLES implementations have lower trancendental precision than desired which
// significantly affects the overall FFT precision.
// For these implementations it might make sense to add a LUT UBO with twiddle factors,
// which can be used here.

// 2-component twiddles, pack in vec4.
#if (!defined(FFT_DUAL) && defined(FFT_HORIZ) && defined(FFT_VEC4))
#define FFT_OUTPUT_STEP 2u
#define FFT_OUTPUT_SHIFT 1u
#define ctwiddle native_vec4
ctwiddle twiddle(uint k, uint p)
{
    // Trancendentals should always be done in highp.
    highp vec2 angles = PI_DIR * (float(k) + vec2(0.0, 1.0)) / float(p);
    highp vec2 cos_a = cos(angles);
    highp vec2 sin_a = sin(angles);
    return ctwiddle(cos_a.x, sin_a.x, cos_a.y, sin_a.y);
}

#ifdef FFT_INVERSE
    #define TWIDDLE_1_8 (native_vec2(+SQRT_1_2, +SQRT_1_2).xyxy)
    #define TWIDDLE_3_8 (native_vec2(-SQRT_1_2, +SQRT_1_2).xyxy)
#else
    #define TWIDDLE_1_8 (native_vec2(+SQRT_1_2, -SQRT_1_2).xyxy)
    #define TWIDDLE_3_8 (native_vec2(-SQRT_1_2, -SQRT_1_2).xyxy)
#endif

// 1-component twiddle, pack in vec2.
#else

#define FFT_OUTPUT_STEP 1u
#define FFT_OUTPUT_SHIFT 0u
#define ctwiddle native_vec2
ctwiddle twiddle(uint k, uint p)
{
    // Trancendentals should always be done in highp.
    highp float angle = PI_DIR * float(k) / float(p);
    return ctwiddle(cos(angle), sin(angle));
}

#ifdef FFT_INVERSE
    #define TWIDDLE_1_8 (native_vec2(+SQRT_1_2, +SQRT_1_2))
    #define TWIDDLE_3_8 (native_vec2(-SQRT_1_2, +SQRT_1_2))
#else
    #define TWIDDLE_1_8 (native_vec2(+SQRT_1_2, -SQRT_1_2))
    #define TWIDDLE_3_8 (native_vec2(-SQRT_1_2, -SQRT_1_2))
#endif

#endif

// Complex multiply by v * -j. Trivial case which can avoid mul/add.
native_vec4 cmul_minus_j(native_vec4 v)
{
    return native_vec4(v.y, -v.x, v.w, -v.z);
}

native_vec2 cmul_minus_j(native_vec2 v)
{
    return native_vec2(v.y, -v.x);
}

// Complex multiply by v * +j. Trivial case which can avoid mul/add.
native_vec4 cmul_plus_j(native_vec4 v)
{
    return native_vec4(-v.y, v.x, -v.w, v.z);
}

native_vec2 cmul_plus_j(native_vec2 v)
{
    return native_vec2(-v.y, v.x);
}

#ifdef FFT_INVERSE
#define cmul_dir_j(v) cmul_plus_j(v)
#else
#define cmul_dir_j(v) cmul_minus_j(v)
#endif

// Calculate an in-place butterfly with twiddle factors.
// a ----------- a + wb
//        \   /
//         \ /
//          X
//         / \
//        /   \
// w * b ------- a - wb
//
void butterfly(inout native_vec4 a, inout native_vec4 b, native_vec4 w)
{
    native_vec4 t = cmul(b, w);
    b = a - t;
    a = a + t;
}

// Computes butterflies, but the twiddle factors for the two butterflies are
// identical.
void butterfly(inout native_vec4 a, inout native_vec4 b, native_vec2 w)
{
    butterfly(a, b, w.xyxy);
}

void butterfly(inout native_vec2 a, inout native_vec2 b, native_vec2 w)
{
    native_vec2 t = cmul(b, w);
    b = a - t;
    a = a + t;
}

// First pass butterfly, special case where w = 1.
void butterfly_p1(inout native_vec4 a, inout native_vec4 b)
{
    native_vec4 t = b;
    b = a - t;
    a = a + t;
}

// First pass butterfly, but also multiply in a twiddle factor of -j to b afterwards.
// Used in P == 1 transforms for radix-4, radix-8 etc.
void butterfly_p1_minus_j(inout native_vec4 a, inout native_vec4 b)
{
    native_vec4 t = b;
    b = native_vec4(1.0, -1.0, 1.0, -1.0) * (a.yxwz - t.yxwz);
    a = a + t;
}

void butterfly_p1_plus_j(inout native_vec4 a, inout native_vec4 b)
{
    native_vec4 t = b;
    b = native_vec4(-1.0, 1.0, -1.0, 1.0) * (a.yxwz - t.yxwz);
    a = a + t;
}

void butterfly_p1(inout native_vec2 a, inout native_vec2 b)
{
    native_vec2 t = b;
    b = a - t;
    a = a + t;
}

void butterfly_p1_minus_j(inout native_vec2 a, inout native_vec2 b)
{
    native_vec2 t = b;
    b = native_vec2(1.0, -1.0) * (a.yx - t.yx);
    a = a + t;
}

void butterfly_p1_plus_j(inout native_vec2 a, inout native_vec2 b)
{
    native_vec2 t = b;
    b = native_vec2(-1.0, 1.0) * (a.yx - t.yx);
    a = a + t;
}

#ifdef FFT_INVERSE
#define butterfly_p1_dir_j(a, b) butterfly_p1_plus_j(a, b)
#else
#define butterfly_p1_dir_j(a, b) butterfly_p1_minus_j(a, b)
#endif

#ifdef FFT_RESOLVE_REAL_TO_COMPLEX
native_vec2 r2c_twiddle(uint i, uint p)
{
    native_vec2 w = -twiddle(i, p);
    return native_vec2(-w.y, w.x);
}

// See http://www.engineeringproductivitytools.com/stuff/T0001/PT10.HTM for
// how the real-to-complex and complex-to-real resolve passes work.
// The final real-to-complex transform pass is done by extracting two interleaved FFTs by conjugate symmetry.

// If we have a real sequence:
// (r0, r1, r2, r3, r4, ...), we merge two adjacent real values to a sequence of complex numbers.
// We take the FFT of this complex sequence as normal.
// What we end up with really is:
// FFT((r0, r2, r4, r6, ...)) + FFT(j * (r1, r3, r5, r7, ...)).
// If we know the individual FFTs of the even and the odds we can complete the FFT by a single decimation-in-frequency stage.
// By conjugate symmetry, we can extract the even and odd FFTs and complex our transform.
// Complex-to-real is just the same thing, but in reverse.

void FFT_real_to_complex(uvec2 i)
{
    uint stride = gl_NumWorkGroups.x * gl_WorkGroupSize.x;
    uint offset = i.y * stride;

    if (i.x == 0u)
    {
#ifdef FFT_INPUT_TEXTURE
        native_vec2 x = load_texture(i);
#else
        native_vec2 x = load_global(offset);
#endif

#ifdef FFT_OUTPUT_IMAGE
        store(ivec2(i), native_vec2(x.x + x.y, 0.0));
        store(ivec2(i) + ivec2(stride, 0), native_vec2(x.x - x.y, 0.0));
#else
        store_global(2u * offset, native_vec2(x.x + x.y, 0.0));
        store_global(2u * offset + stride, native_vec2(x.x - x.y, 0.0));
#endif
    }
    else
    {
#ifdef FFT_INPUT_TEXTURE
        native_vec2 a = load_texture(i);
        native_vec2 b = load_texture(uvec2(stride - i.x, i.y));
#else
        native_vec2 a = load_global(offset + i.x);
        native_vec2 b = load_global(offset + stride - i.x);
#endif
        b = native_vec2(b.x, -b.y);
        native_vec2 fe = a + b;
        native_vec2 fo = cmul(a - b, r2c_twiddle(i.x, stride));

#ifdef FFT_OUTPUT_IMAGE
        store(ivec2(i), native_float(0.5) * (fe + fo));
#else
        store_global(2u * offset + i.x, native_float(0.5) * (fe + fo));
#endif
    }
}
#endif

#ifdef FFT_RESOLVE_COMPLEX_TO_REAL
native_vec2 c2r_twiddle(uint i, uint p)
{
    native_vec2 w = twiddle(i, p);
    return native_vec2(-w.y, w.x);
}

void FFT_complex_to_real(uvec2 i)
{
    uint stride = gl_NumWorkGroups.x * gl_WorkGroupSize.x;
    uint offset = i.y * stride;

#ifdef FFT_INPUT_TEXTURE
    native_vec2 a = load_texture(i);
    native_vec2 b = load_texture(uvec2(stride - i.x, i.y));
#else
    native_vec2 a = load_global(2u * offset + i.x);
    native_vec2 b = load_global(2u * offset + stride - i.x);
#endif
    b = native_vec2(b.x, -b.y);
    native_vec2 even = a + b;
    native_vec2 odd = cmul(a - b, c2r_twiddle(i.x, stride));

    store_global(offset + i.x, even + odd);
}
#endif

