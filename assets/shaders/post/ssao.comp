#version 450
layout(local_size_x = 8, local_size_y = 8) in;

layout(constant_id = 0) const int KERNEL_SIZE = 16;
layout(constant_id = 1) const float HALO_THRESHOLD = 0.1;

layout(set = 0, binding = 0) uniform sampler2DArray uDepth;
layout(set = 0, binding = 1) uniform mediump sampler2DArray uNormal;
layout(set = 0, binding = 2, r8) writeonly uniform mediump image2DArray uAO;
layout(set = 0, binding = 3) uniform mediump sampler2D uNoise;
layout(set = 0, binding = 4, std140) uniform Kernel
{
    vec3 hemisphere_kernel[KERNEL_SIZE];
};

layout(std140, set = 1, binding = 0) uniform Registers
{
    mat4 shadow_matrix;
    vec4 inv_z_transform;
    vec3 to_world_x;
    vec3 to_world_y;
    vec3 to_world_z;
    vec3 to_world_base;
    vec2 inv_padded_resolution;
    ivec2 num_threads;
} registers;

float to_world_depth(float z)
{
    vec2 zw = z * registers.inv_z_transform.xy + registers.inv_z_transform.zw;
    return -zw.x / zw.y;
}

float max4(vec4 v)
{
    vec2 v2 = max(v.xy, v.zw);
    return max(v2.x, v2.y);
}

void main()
{
    ivec2 ident = ivec2(gl_GlobalInvocationID.xy);
    int layer = int(gl_GlobalInvocationID.z);
    int layer_x = layer & 3;
    int layer_y = layer >> 2;

    if (all(lessThan(ident, registers.num_threads)))
    {
        float linear_depth = texelFetch(uDepth, ivec3(ident, layer), 0).x;
        mediump float ao;
        if (linear_depth > 0.0)
        {
            vec2 uv = (vec2(ident * 4 + ivec2(layer_x, layer_y)) + 0.5) * registers.inv_padded_resolution;
            uv = uv * 2.0 - 1.0;
            vec3 world =
                (uv.x * registers.to_world_x + uv.y * registers.to_world_y + registers.to_world_z) * linear_depth +
                registers.to_world_base;

            mediump vec3 normal = normalize(texelFetch(uNormal, ivec3(ident, layer), 0).xyz * 2.0 - 1.0);
            mediump vec3 rvec = vec3(texelFetch(uNoise, ivec2(layer_x, layer_y), 0).xy, 0.0);
            mediump vec3 tangent = normalize(rvec - normal * dot(rvec, normal));
            mediump vec3 bitangent = cross(normal, tangent);
            mediump mat3 tbn = mat3(tangent, bitangent, normal);
            ao = 0.0;
            vec2 uv_offset = (1.5 - vec2(layer_x, layer_y)) * registers.inv_padded_resolution;

            for (int i = 0; i < KERNEL_SIZE; i++)
            {
                mediump vec3 samp = tbn * hemisphere_kernel[i];
                vec3 near_world = world + HALO_THRESHOLD * samp;
                vec4 c = registers.shadow_matrix * vec4(near_world, 1.0);

                if (c.w >= 0.0)
                {
                    vec3 C = c.xyz / c.w;
                    float ref_depth = to_world_depth(C.z);
                    vec4 sampled_depth4 = textureGather(uDepth, vec3(C.xy + uv_offset, layer));
                    float sampled_depth = max4(sampled_depth4);
                    float delta = ref_depth - sampled_depth;

                    if (delta < 0.0)
                    {
                        ao += 1.0;
                    }
                    else
                    {
                        mediump float v = smoothstep(0.9 * HALO_THRESHOLD, HALO_THRESHOLD, delta);
                        ao += v;
                    }
                }
            }

            ao /= float(KERNEL_SIZE);
        }
        else
            ao = 1.0;

        imageStore(uAO, ivec3(ident, layer), vec4(ao));
    }
}
