#version 450
layout(local_size_x = 8, local_size_y = 8) in;

layout(set = 0, binding = 0) uniform sampler2D uDepth;
layout(set = 0, binding = 1) uniform mediump sampler2D uNormal;
layout(r16f, set = 0, binding = 2) writeonly uniform image2DArray uInterleavedDepth;
layout(rgb10_a2, set = 0, binding = 3) writeonly uniform mediump image2DArray uInterleavedNormal;

layout(push_constant, std430) uniform Push
{
	vec4 inv_z_transform;
	vec2 inv_padded_resolution;
	uvec2 num_threads;
} registers;

float to_world_depth(float z)
{
    vec2 zw = z * registers.inv_z_transform.xy + registers.inv_z_transform.zw;
    return -zw.x / zw.y;
}

void main()
{
	uvec2 ident = gl_GlobalInvocationID.xy;
    if (all(lessThan(ident, registers.num_threads)))
	{
        vec2 uv = (vec2(ident) + 0.5) * registers.inv_padded_resolution;
		float d = textureLod(uDepth, uv, 0.0).x;
		if (d == 1.0)
			d = -1.0;
		else
			d = to_world_depth(d);

        mediump vec3 n = textureLod(uNormal, uv, 0.0).rgb;
		uvec2 out_coord = ident >> 2u;
		uvec2 layer_2d = ident & 3u;
		uint layer_1d = layer_2d.y * 4u + layer_2d.x;

		imageStore(uInterleavedDepth, ivec3(out_coord, layer_1d), vec4(d));
		imageStore(uInterleavedNormal, ivec3(out_coord, layer_1d), vec4(n, 0.0));
	}
}

